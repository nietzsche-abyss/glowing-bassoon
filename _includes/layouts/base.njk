<!doctype html>
<html lang="{{ metadata.language }}" class="no-js">
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>{{ title or metadata.title }}</title>
		<meta name="description" content="{{ description or metadata.description }}">
		<link rel="alternate" href="/feed/feed.xml" type="application/atom+xml" title="{{ metadata.title }}">

		{#- Uncomment this if youâ€™d like folks to know that you used Eleventy to build your site!  #}
		{#- <meta name="generator" content="{{ eleventy.generator }}"> #}

		{#-
		Plain-text bundles are provided via the `eleventy-plugin-bundle` plugin:
		1. CSS:
			* Add to a per-page bundle using `{% css %}{% endcss %}`
			* Retrieve bundle content using `{% getBundle "css" %}` or `{% getBundleFileUrl "css" %}`
		2. Or for JavaScript:
			* Add to a per-page bundle using `{% js %}{% endjs %}`
			* Retrieve via `{% getBundle "js" %}` or `{% getBundleFileUrl "js" %}`
		3. Learn more: https://github.com/11ty/eleventy-plugin-bundle
		#}

		{#- Add CSS to the bundle #}
		<style>/* This is an arbitrary CSS string added to the bundle */</style>

		{#- Add the contents of a file to the bundle #}
		<style>{% include "css/index.css" %}</style>

		{#- Or you can add from node_modules #}
		{# <style>{% include "node_modules/something.css" %}</style> #}

		{#- Render the CSS bundle using inlined CSS (for the fastest site performance in production) #}
		<style>{% getBundle "css" %}</style>

		{#- Renders the CSS bundle using a separate file, if you can't set CSP directive style-src: 'unsafe-inline' #}
		{#- <link rel="stylesheet" href="{% getBundleFileUrl "css" %}"> #}

		{#- Add the heading-anchors web component to the JavaScript bundle #}
		<script type="module">{% include "node_modules/@zachleat/heading-anchors/heading-anchors.js" %}</script>

		{#- Inline script to handle no-js/js class swap (must be in head for immediate effect) #}
		<script>document.documentElement.classList.replace('no-js', 'js');</script>

		{#- Add visibility styles to the CSS bundle to prevent flash of unstyled content during animation #}
		<style>
			.no-js [data-decode] {
				visibility: visible;
			}
			.js [data-decode] {
				visibility: hidden;
			}
		</style>
	</head>
	<body>
		<a href="#main" id="skip-link" class="visually-hidden">Skip to main content</a>

		<header>
			<a href="/" class="home-link">{{ metadata.title }}</a>
			<p id="title-p" data-decode>{{ metadata.description }}</p>

			{#- Read more about `eleventy-navigation` at https://www.11ty.dev/docs/plugins/navigation/ #}
			<nav>
				<h2 class="visually-hidden">Top level navigation menu</h2>
				<ul class="nav">
				{%- for entry in collections.all | eleventyNavigation %}
					<li class="nav-item"><a href="{{ entry.url }}"{% if entry.url == page.url %} aria-current="page"{% endif %} data-decode>{{ entry.title }}</a></li>
				{%- endfor %}
				</ul>
			</nav>
		</header>

		<main id="main">
			<heading-anchors>
				{{ content | safe }}
			</heading-anchors>
		</main>

		<footer>
			<p>
				<em data-decode>2025 Nietzsche Virus Lab</em>
			</p>
		</footer>

		<!-- This page `{{ page.url }}` was built on {% currentBuildDate %} -->

		{#- Add the decoding function and animation trigger to the JS bundle (assumes you have eleventyConfig.addBundle("js") in your config) #}
		{% js %}
		/**
		 * Decodes an element's text by revealing the actual text character-by-character,
		 * replacing the rest with random characters.
		 *
		 * @param {HTMLElement} el - The element whose text we want to decode.
		 * @param {string} finalText - The final text to display.
		 * @param {number} speed - The interval speed in ms for each decoding iteration.
		 */
		function decodeElement(el, finalText, speed) {
		  const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";
		  let iterations = 0;
		  const interval = setInterval(() => {
		    el.textContent = finalText
		      .split('')
		      .map((char, idx) => (idx < iterations)
		        ? char
		        : chars[Math.floor(Math.random() * chars.length)])
		      .join('');
		    iterations++;
		    if (iterations > finalText.length) {
		      clearInterval(interval);
		    }
		  }, speed);
		}

		document.addEventListener('DOMContentLoaded', () => {
		  const elements = document.querySelectorAll('[data-decode]');
		  elements.forEach((el, index) => {
		    const finalText = el.textContent.trim();
		    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";
		    // Set initial random text
		    el.textContent = finalText.split('').map(() => chars[Math.floor(Math.random() * chars.length)]).join('');
		    // Make visible and start animation with staggered delay
		    setTimeout(() => {
		      el.style.visibility = 'visible';
		      decodeElement(el, finalText, 30); // Adjust speed as needed (e.g., 30ms per iteration)
		    }, index * 200); // 200ms delay between each element's animation
		  });
		});
		{% endjs %}

		<script type="module" src="{% getBundleFileUrl "js" %}"></script>
	</body>
</html>